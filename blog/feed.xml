<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sharpening the Saw until it Vanishes</title>
    <description>tips for better life, especially in tech
</description>
    <link>http://genkisugimoto.com/blog/</link>
    <atom:link href="http://genkisugimoto.com/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 13 Sep 2015 11:55:43 +0900</pubDate>
    <lastBuildDate>Sun, 13 Sep 2015 11:55:43 +0900</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Wrap boot2docker with this docker function for stress-free docker life on OS X</title>
        <description>&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; is awesome. But one of the not-so-awesome things is that we need &lt;a href=&quot;http://boot2docker.io/&quot;&gt;boot2docker&lt;/a&gt; to use it on OS X.&lt;/p&gt;

&lt;p&gt;You might be familiar with this error message when you run docker without executing &lt;code&gt;$(boot2docker shellinit)&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
FATA[0000] Get http:///var/run/docker.sock/v1.17/images/json: dial unix /var/run/docker.sock: no such file or directory. Are you trying to connect to a TLS-enabled daemon without TLS?
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or this message when you run docker after &lt;code&gt;$(boot2docker shellinit)&lt;/code&gt;, but boot2docker itself is not started:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
FATA[0032] An error occurred trying to connect: Get https://192.168.59.103:2376/v1.17/images/json: dial tcp 192.168.59.103:2376: i/o timeout
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I don’t know about you, but I don’t want to deal with boot2docker (which is just a VM to run docker on) when I want to play around with docker. So, hoping someday docker will run natively on OS X, I wrote a simple docker function which wraps boot2docker and does the right thing.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;Put this &lt;code&gt;docker&lt;/code&gt; function definition to your &lt;code&gt;~/.zshrc&lt;/code&gt; or &lt;code&gt;~/.bashrc&lt;/code&gt; (though not tested with bash):&lt;/p&gt;

&lt;p&gt;&lt;code data-gist-id=&quot;37aff8bff273e8f0e80c&quot;&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It does 2 things before running actual docker command:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;start boot2docker VM when it’s not started&lt;/li&gt;
  &lt;li&gt;export docker environment variables when it’s not set&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So basically, you just have to run &lt;code&gt;$ docker COMMAND&lt;/code&gt; whenever you want and the function will take care of all the boot2docker stuffs.
Happy docker life :)&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Jun 2015 00:00:00 +0900</pubDate>
        <link>http://genkisugimoto.com/blog/docker/2015/06/03/wrap-boot2docker-with-docker-function.html</link>
        <guid isPermaLink="true">http://genkisugimoto.com/blog/docker/2015/06/03/wrap-boot2docker-with-docker-function.html</guid>
        
        
        <category>docker</category>
        
      </item>
    
      <item>
        <title>Move Your Tmux Windows like a Pro</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://tmux.sourceforge.net/&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://tmux.sourceforge.net&#39;]);&quot;&gt;tmux&lt;/a&gt; is a great tool for us programmers. However, there are some frustrations about it. One of them is its inability to move windows intuitively. In this post, I’m going to give you a script and key bindings which enable you to move tmux windows around like a pro.&lt;/p&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-1&quot;&gt;
    How you move windows
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
    &lt;p&gt;
      Without any scripting, you can move windows using tmux&amp;#8217;s &lt;code&gt;tmux swap-window&lt;/code&gt; command. It takes &lt;code&gt;-s&lt;/code&gt; (source) and &lt;code&gt;-t&lt;/code&gt; (target) options, and (you guessed it) swap them. So for example, if you want to swap windows 2 and 5, you type:
    &lt;/p&gt;

    &lt;div class=&quot;org-src-container&quot;&gt;
      &lt;pre class=&quot;src src-sh&quot;&gt;$ tmux swap-window -s :2 -t :5
&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;
      This is a little fingerful. And I generally don&amp;#8217;t &amp;#8220;swap&amp;#8221; windows, I just move it (think about when you move tabs on your web browser). So, while above commands make window arrangement from &amp;#8220;1 2 3 4 5&amp;#8243; to &amp;#8220;1 5 3 4 2&amp;#8243;, what I really want is &amp;#8220;1 3 4 5 2&amp;#8243;, like when I moved 2nd tab to the right of 5th tab in my web browser.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-2&quot;&gt;
    Solution &amp;#x2013; script
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
    &lt;p&gt;
      Fortunately, tmux is highly scriptable. So with a little effort, you can get the behavior you want. For the purpose of moving windows, I wrote the script below:
    &lt;/p&gt;

    &lt;p&gt;
      &lt;code data-gist-id=&quot;488b3d38cd93f88e3525&quot;&gt;&lt;/code&gt;
    &lt;/p&gt;

    &lt;p&gt;
      What it does is to just swap adjacent windows, considering wrapping. So, if you want to move current window to right, (assuming you have the script in your PATH) you can type:
    &lt;/p&gt;

    &lt;div class=&quot;org-src-container&quot;&gt;
      &lt;pre class=&quot;src src-sh&quot;&gt;$ tmux-win-move right
&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;
      On 2nd window of &amp;#8220;1 2 3 4 5&amp;#8243; arrangement, by repeating this command 3 times, you can get desired &amp;#8220;1 3 4 5 2&amp;#8243; arrangement. However, repeating such a command is tedious. This is where key binding comes in.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-3&quot;&gt;
    Solution &amp;#x2013; key binding
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
    &lt;p&gt;
      If you are a vim user, I recommend you to put the following bindings in your &lt;code&gt;~/.tmux.conf&lt;/code&gt;:
    &lt;/p&gt;

    &lt;div class=&quot;org-src-container&quot;&gt;
      &lt;pre class=&quot;src src-sh&quot;&gt;bind-key -r H run-shell &lt;span style=&quot;color: #00afaf;&quot;&gt;&#39;tmux-win-move left&#39;&lt;/span&gt;
bind-key -r L run-shell &lt;span style=&quot;color: #00afaf;&quot;&gt;&#39;tmux-win-move right&#39;&lt;/span&gt;
&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;
      &lt;code&gt;-r&lt;/code&gt; option makes the key binding repeatable, meaning that you can repeat above command by (if your prefix is C-b) &lt;code&gt;C-b L L L&lt;/code&gt; if you type it fast enough.
    &lt;/p&gt;

    &lt;p&gt;
      So, with above script and key bindings, you can move your tmux windows like a pro. After using it myself for a while, I&amp;#8217;m pretty fond of it. It feels like the same as moving tabs on web browsers, so I know intuitively what the arrangement will look like after I move a window.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-4&quot;&gt;
    What&amp;#8217;s next?
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
    &lt;p&gt;
      Now that you can move tmux windows as you like, you have no reason to be afraid of having many windows. In order to make it easy to generate many windows, I recommend &lt;a href=&quot;https://github.com/tmuxinator/tmuxinator&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://github.com&#39;]);&quot;&gt;tmuxinator gem&lt;/a&gt;. It makes development setup (e.g. &lt;code&gt;mysqld start&lt;/code&gt;, &lt;code&gt;rails server&lt;/code&gt; etc.) a snap.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 24 Aug 2014 00:00:00 +0900</pubDate>
        <link>http://genkisugimoto.com/blog/move-your-tmux-windows-like-a-pro/</link>
        <guid isPermaLink="true">http://genkisugimoto.com/blog/move-your-tmux-windows-like-a-pro/</guid>
        
        <category>productivity</category>
        
        <category>tmux</category>
        
        
        <category>uncategorized</category>
        
      </item>
    
      <item>
        <title>Fill This Template to Find Your Passion</title>
        <description>&lt;p&gt;Finding passion is one of the most important and the most difficult things in our lives. I’ve been struggling for a long time trying to find out where my passion lies. Recently, because my job hunting is starting, I’m really into thinking about it.&lt;/p&gt;

&lt;p&gt;Today, I want to share you 1 tool to help you find your passion. However, I think there is no silver bullet to find our passion, and we have to think from many aspects. I just hope this tool helps you take a step forward in the journey of your self discovery.&lt;/p&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-1&quot;&gt;
    tl;dr
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
    &lt;p&gt;
      For busy guys, here&amp;#8217;s the thing:
    &lt;/p&gt;

    &lt;p&gt;
      &amp;#8220;In my ideal world, &amp;#x2026;&amp;#8221;
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-2&quot;&gt;
    Why Template?
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
    &lt;p&gt;
      Templates are good because it&amp;#8217;s immediately actionable. One of my favorite is the &lt;a href=&quot;http://www.mountaingoatsoftware.com/blog/advantages-of-the-as-a-user-i-want-user-story-template&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://www.mountaingoatsoftware.com&#39;]);&quot;&gt;user story template&lt;/a&gt; (&amp;#8220;As a &amp;lt;type of user&amp;gt;, I want &amp;lt;some goal&amp;gt; so that &amp;lt;some reason&amp;gt;&amp;#8221;). Filling this out gives me a great first momentum of starting user-centered service designing.
    &lt;/p&gt;

    &lt;p&gt;
      There are many articles on the Internet (e.g. &amp;#8220;N Ways to Find Your Passion&amp;#8221;) trying to help us find our passion. However, I think most of those ideas are too abstract and rarely immediately actionable. So, I came up with a template which I can fill out right away.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-3&quot;&gt;
    The Template for Finding your Passion
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
    &lt;p&gt;
      Here&amp;#8217;s the template:
    &lt;/p&gt;

    &lt;p&gt;
      &amp;#8220;In my ideal world, &amp;#x2026;&amp;#8221;
    &lt;/p&gt;

    &lt;p&gt;
      By finishing this sentence, you will get a vague idea what you want to do with your life. Because your ideal world is, well, your ideal world, you are most likely to be passionate to actualize such a world.
    &lt;/p&gt;

    &lt;p&gt;
      A good thing about this template is that this doesn&amp;#8217;t limit anything about your idea. So you can be virtuous like &amp;#8220;In my ideal world, there is no child suffering from starvation&amp;#8221;, or you can be selfish like &amp;#8220;In my ideal world, I&amp;#8217;m the richest person in the world.&amp;#8221; Try out some variations and find the most strong sentence that hits your heart.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-4&quot;&gt;
    Examples
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
    &lt;p&gt;
      I&amp;#8217;ve tried it myself and came up with following sentences:
    &lt;/p&gt;

    &lt;ul class=&quot;org-ul&quot;&gt;
      &lt;li&gt;
        In my ideal world, I&amp;#8217;m super productive and I can do anything better than any man.
      &lt;/li&gt;
      &lt;li&gt;
        In my ideal world, I&amp;#8217;m improving myself constantly at the speed of light.
      &lt;/li&gt;
      &lt;li&gt;
        In my ideal world, people are doing only creative things and not any barbaric stuffs (like tax).
      &lt;/li&gt;
      &lt;li&gt;
        In my ideal world, people are doing what they love 100% of their time.
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;
      I got fond of the last one because the reason I&amp;#8217;m into productivity stuffs is to use more time to do what I love. And I found I was happy when I saved other people&amp;#8217;s time and made them focus on what they truly wanted to do. So, it might be a good decision for me to devote my life to actualize the world where people can do what they love 100% of their time.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-5&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-5&quot;&gt;
    What&amp;#8217;s Next?
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
    &lt;p&gt;
      To be honest, I&amp;#8217;m not sure. I&amp;#8217;m not planning to stop thinking here, so I will continue revising this sentence and thinking with other methods. If you are confident that you have firm, unchangeable value in you, I suggest you to write a &amp;#8220;personal mission statement&amp;#8221;, which is introduced in the infamous book &amp;#8220;&lt;a href=&quot;http://www.amazon.com/Habits-Highly-Effective-People-Powerful/dp/1451639619/&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://www.amazon.com&#39;]);&quot;&gt;The 7 Habits of Highly Effective People&lt;/a&gt;&amp;#8220;.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 08 Jun 2014 00:00:00 +0900</pubDate>
        <link>http://genkisugimoto.com/blog/fill-this-template-to-find-your-passion/</link>
        <guid isPermaLink="true">http://genkisugimoto.com/blog/fill-this-template-to-find-your-passion/</guid>
        
        <category>lifehack</category>
        
        
        <category>uncategorized</category>
        
      </item>
    
      <item>
        <title>How to Jump into Tmux Session Automatically</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://tmux.sourceforge.net/&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://tmux.sourceforge.net&#39;]);&quot;&gt;Tmux&lt;/a&gt; is a very powerful tool to boost your productivity. It became one of my most important tools shortly after I start using it. I can’t imagine how I was working when I didn’t know about tmux.&lt;/p&gt;

&lt;p&gt;Previously, I was using iTerm’s “Send text at start” feature to invoke tmux session automatically. However, one day, when I was playing with my Linux machine, I noticed I was not in tmux session when I tried to scroll up and see what was the output of the previous command. This really irritated me and I thought I had to do something about it. Today, I’ll share what I did so that I can always be in tmux session.&lt;/p&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-1&quot;&gt;
    The Right Place to Start Tmux Session: ~/.zshrc
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
    &lt;p&gt;
      Fortunately, tmux is highly scriptable. This makes it possible to automate many aspects of tmux controls by writing some scripts.
    &lt;/p&gt;

    &lt;p&gt;
      First of all, we want to know if we are already in tmux session so that we don&amp;#8217;t try to jump into a session if we are already in one. This can be done easily by checking &lt;code&gt;$TMUX&lt;/code&gt; environment variable, which tmux defines in tmux sessions.
    &lt;/p&gt;

    &lt;p&gt;
      If we find we are not in a tmux session, we try to jump into one. Let&amp;#8217;s create new session with &lt;code&gt;tmux new-session&lt;/code&gt; command.
    &lt;/p&gt;

    &lt;p&gt;
      By implementing these steps, whole script looks like this:
    &lt;/p&gt;

    &lt;p&gt;
      &lt;code data-gist-id=&quot;94cf8c9868f9bb95c923&quot;&gt;&lt;/code&gt;

      &lt;p&gt;
        Place it in the beginning of your &lt;code&gt;~/.zshrc&lt;/code&gt; or &lt;code&gt;~/.bashrc&lt;/code&gt; and you will have stronger relationship with tmux. If you want to use your shell outside of tmux frequently, remove &lt;code&gt;exit&lt;/code&gt; command. This makes it possible to quit tmux session and continue using shell outside of tmux.
      &lt;/p&gt;
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-2&quot;&gt;
    What&amp;#8217;s Next?
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
    &lt;p&gt;
      This idea came from the book &amp;#8220;&lt;a href=&quot;http://pragprog.com/book/bhtmux/tmux&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://pragprog.com&#39;]);&quot;&gt;tmux: Productive Mouse-Free Development&lt;/a&gt;&amp;#8220;. Before reading this book, I was thinking tmux is just a multiplexer. However, after reading this, I realized that the power of tmux lies in it&amp;#8217;s scriptability and I came up with many ideas to improve my workflow. So, I suggest you to read it if you haven&amp;#8217;t read it yet. It&amp;#8217;s a quick read with 88 pages.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 01 Jun 2014 00:00:00 +0900</pubDate>
        <link>http://genkisugimoto.com/blog/how-to-jump-into-tmux-session-automatically/</link>
        <guid isPermaLink="true">http://genkisugimoto.com/blog/how-to-jump-into-tmux-session-automatically/</guid>
        
        <category>productivity</category>
        
        <category>shell</category>
        
        <category>tmux</category>
        
        
        <category>uncategorized</category>
        
      </item>
    
      <item>
        <title>How to Get PUSH Notification from GitHub</title>
        <description>&lt;p&gt;If you use GitHub for your job or for your hobby, it’s likely that sometimes you have to wait other people to review your code or comment on issues. One day, I realized myself visiting GitHub every so often so that I can notice reviews as soon as possible. I knew this is really bad for my productivity because it meant I was using my brain resources just waiting for other people.&lt;/p&gt;

&lt;p&gt;So, I have set up a system which sends push notifications when I get comments on GitHub. This system is to my previous GitHub checking habit what &lt;a href=&quot;http://en.wikipedia.org/wiki/Interrupt&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://en.wikipedia.org&#39;]);&quot;&gt;Interrupt&lt;/a&gt; is to &lt;a href=&quot;http://en.wikipedia.org/wiki/Polling_(computer_science)&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://en.wikipedia.org&#39;]);&quot;&gt;Polling&lt;/a&gt; in computer science – huge improvement in terms of using CPU (my brain) efficiently. I will share this system for you.&lt;/p&gt;

&lt;p&gt;This post assumes following situations:&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
  &lt;li&gt;
    You have a Gmail account
  &lt;/li&gt;
  &lt;li&gt;
    You are not getting push notifications for emails (if you are, I must tell you that those are &amp;#8220;&lt;a href=&quot;http://lifehacker.com/5895617/you-should-forget-about-push-notifications-for-your-email&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://lifehacker.com&#39;]);&quot;&gt;killing your focus and destroying your ability to work to your capacity&lt;/a&gt;&amp;#8220;)
  &lt;/li&gt;
  &lt;li&gt;
    You know what IFTTT is (if not, I highly recommend you to &lt;a href=&quot;http://www.quickanddirtytips.com/tech/web/what-is-ifttt-and-how-can-it-improve-your-digital-life&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://www.quickanddirtytips.com&#39;]);&quot;&gt;learn what it is and how it can improve your digital life&lt;/a&gt;)
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-1&quot;&gt;
    GitHub&amp;#8217;s Notification
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
    &lt;p&gt;
      You might be thinking, &amp;#8220;don&amp;#8217;t you know GitHub already provides notification service?&amp;#8221; I know it, but the problem is that it only provides email notification. To be precise, my habit was to check Gmail every so often so that I can notice GitHub notification, which was killing my productivity. Email is not the way to get important notifications because other non-important emails might catch your eye and distract you.
    &lt;/p&gt;

    &lt;p&gt;
      So, the goal of the system is to somehow turn GitHub&amp;#8217;s email notification into push notification.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-2&quot;&gt;
    IFTTT
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
    &lt;p&gt;
      This is where IFTTT comes in. Let&amp;#8217;s create a new recipe which will be triggered by emails from GitHub and send you push notifications. The recipe I created is &lt;a href=&quot;https://ifttt.com/myrecipes/personal/9646882&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://ifttt.com&#39;]);&quot;&gt;here&lt;/a&gt; and you can see it as an example (or just use it directly).
    &lt;/p&gt;
  &lt;/div&gt;

  &lt;div id=&quot;outline-container-sec-2-1&quot; class=&quot;outline-3&quot;&gt;
    &lt;h3 id=&quot;sec-2-1&quot;&gt;
      This: Email with Label
    &lt;/h3&gt;

    &lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
      &lt;p&gt;
        Choose Gmail as a trigger channel, and choose &amp;#8220;New email labeled&amp;#8221; as a trigger. Any label name would work, but make it clear like &amp;#8220;github&amp;#8221;. I will explain how to label emails later.
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div id=&quot;outline-container-sec-2-2&quot; class=&quot;outline-3&quot;&gt;
    &lt;h3 id=&quot;sec-2-2&quot;&gt;
      That: Notification
    &lt;/h3&gt;

    &lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
      &lt;p&gt;
        Any notification service would work. My choice for now is &lt;a href=&quot;https://www.pushbullet.com/&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://www.pushbullet.com&#39;]);&quot;&gt;Pushbullet&lt;/a&gt;. I am not a heavy user yet, but I like the simple interface and it is doing its job so far on my Firefox and iPod touch. After you choose your notification service, create push content using Gmail&amp;#8217;s ingredients like &amp;#8220;Subject&amp;#8221; and &amp;#8220;BodyPlain&amp;#8221;.
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-3&quot;&gt;
    Label Emails from GitHub
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
    &lt;p&gt;
      Now you should be able to get notification whenever an email is labeled &amp;#8220;github&amp;#8221;. So, the last step is to label GitHub notification emails.
    &lt;/p&gt;
  &lt;/div&gt;

  &lt;div id=&quot;outline-container-sec-3-1&quot; class=&quot;outline-3&quot;&gt;
    &lt;h3 id=&quot;sec-3-1&quot;&gt;
      Change GitHub&amp;#8217;s Notification Address
    &lt;/h3&gt;

    &lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
      &lt;p&gt;
        Gmail offers a pretty awesome trick that you can &lt;a href=&quot;http://gmailblog.blogspot.jp/2008/03/2-hidden-ways-to-get-more-from-your.html&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://gmailblog.blogspot.jp&#39;]);&quot;&gt;append &amp;#8220;+&amp;#8221; and any text after your email address&amp;#8217; local part&lt;/a&gt;. If your address is &amp;#8220;mail@gmail.com&amp;#8221;, you can use addresses like &amp;#8220;mail+friends@gmail.com&amp;#8221; or &amp;#8220;mail+family@gmail.com&amp;#8221;, and as you guessed, &amp;#8220;mail+github@gmail.com&amp;#8221; too. So, let&amp;#8217;s make GitHub send notifications to your &amp;#8220;mail+github@gmail.com&amp;#8221; address.
      &lt;/p&gt;

      &lt;ol class=&quot;org-ol&quot;&gt;
        &lt;li&gt;
          Add another email address (&amp;#8220;mail+github@gmail.com&amp;#8221;): &lt;a href=&quot;https://github.com/settings/emails&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://github.com&#39;]);&quot;&gt;https://github.com/settings/emails&lt;/a&gt;
        &lt;/li&gt;
        &lt;li&gt;
          Choose that as the notification email address: &lt;a href=&quot;https://github.com/settings/notifications&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://github.com&#39;]);&quot;&gt;https://github.com/settings/notifications&lt;/a&gt;
        &lt;/li&gt;
      &lt;/ol&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div id=&quot;outline-container-sec-3-2&quot; class=&quot;outline-3&quot;&gt;
    &lt;h3 id=&quot;sec-3-2&quot;&gt;
      Create a Filter
    &lt;/h3&gt;

    &lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-2&quot;&gt;
      &lt;p&gt;
        Now, let&amp;#8217;s assign the &amp;#8220;github&amp;#8221; label to all emails sent to &amp;#8220;mail+github@gmail.com&amp;#8221; address.
      &lt;/p&gt;

      &lt;ol class=&quot;org-ol&quot;&gt;
        &lt;li&gt;
          Visit &lt;a href=&quot;https://mail.google.com/mail/u/0/#settings/filters&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://mail.google.com&#39;]);&quot;&gt;https://mail.google.com/mail/u/0/#settings/filters&lt;/a&gt;
        &lt;/li&gt;
        &lt;li&gt;
          Click &amp;#8220;Create a new filter&amp;#8221;
        &lt;/li&gt;
        &lt;li&gt;
          Input &amp;#8220;mail+github@gmail.com&amp;#8221; to &amp;#8220;To&amp;#8221; field
        &lt;/li&gt;
        &lt;li&gt;
          Click &amp;#8220;Create filter with this search&amp;#8221;
        &lt;/li&gt;
        &lt;li&gt;
          In &amp;#8220;Apply the label&amp;#8221; section, choose &amp;#8220;github&amp;#8221; (you can create new label here. Be sure to choose the same name you used in your IFTTT recipe)
        &lt;/li&gt;
        &lt;li&gt;
          Click &amp;#8220;Create filter&amp;#8221;
        &lt;/li&gt;
      &lt;/ol&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-4&quot;&gt;
    All Set
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
    &lt;p&gt;
      OK, you are all set and now you can forget about waiting for code reviews or comments and do other productive things until push notifications come. But before that, I recommend you to test your system by sending an email to &amp;#8220;mail+github@gmail.com&amp;#8221; yourself. The mail should be labeled as &amp;#8220;github&amp;#8221; and push notification should be sent to you. (In my case, it took 2 to 3 minutes to get a push after sending an email myself, so don&amp;#8217;t worry if your push does not come instantly.)
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-5&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-5&quot;&gt;
    What&amp;#8217;s Next?
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
    &lt;p&gt;
      This technique can be applied to any situations. For example, you can get notifications for emails from your family by having them send emails to &amp;#8220;mail+family@gmail.com&amp;#8221; rather than &amp;#8220;mail@gmail.com&amp;#8221; (don&amp;#8217;t forget to create another IFTTT recipe and another Gmail filter). Push notification can help you free up your brain resources like this, or hurt your productivity by distracting you all the time. So, push wisely.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 20 Apr 2014 00:00:00 +0900</pubDate>
        <link>http://genkisugimoto.com/blog/how-to-get-push-notification-from-github/</link>
        <guid isPermaLink="true">http://genkisugimoto.com/blog/how-to-get-push-notification-from-github/</guid>
        
        <category>github</category>
        
        <category>productivity</category>
        
        
        <category>uncategorized</category>
        
      </item>
    
      <item>
        <title>Command Line Interface for Online Programming Contests</title>
        <description>&lt;p&gt;Programming contests are fun. However, there are chores which are not fun, like&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
  &lt;li&gt;
    copy a sample input and run a program against it
  &lt;/li&gt;
  &lt;li&gt;
    compare it with a sample answer
  &lt;/li&gt;
  &lt;li&gt;
    submit (copy &amp;amp; paste or select a file)
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve built a tool which automates these chores so that we can enjoy only really fun part of programming contests (which is, thinking and implementing). It’s a rubygem named “CLI Coder”. GitHub page is &lt;a href=&quot;https://github.com/Genki-S/clicoder&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://github.com&#39;]);&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-1&quot;&gt;
    What&amp;#8217;s Next?
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
    &lt;p&gt;
      For now, 2 online sites named &lt;a href=&quot;http://judge.u-aizu.ac.jp/onlinejudge/&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://judge.u-aizu.ac.jp&#39;]);&quot;&gt;AOJ&lt;/a&gt; and &lt;a href=&quot;http://atcoder.jp/&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://atcoder.jp&#39;]);&quot;&gt;AtCoder&lt;/a&gt; are available. These are famous in Japan, but maybe not for people around the world. I made it easy to extend with other sites, so I am planning to expand the sites this tool can deal with. Maybe &lt;a href=&quot;http://poj.org/&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://poj.org&#39;]);&quot;&gt;PKU&lt;/a&gt;, or &lt;a href=&quot;http://www.codechef.com/&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://www.codechef.com&#39;]);&quot;&gt;CodeChef&lt;/a&gt;? Let me know if you have requests!
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 06 Apr 2014 00:00:00 +0900</pubDate>
        <link>http://genkisugimoto.com/blog/command-line-interface-for-online-programming-contests/</link>
        <guid isPermaLink="true">http://genkisugimoto.com/blog/command-line-interface-for-online-programming-contests/</guid>
        
        <category>programming-contest</category>
        
        
        <category>uncategorized</category>
        
      </item>
    
      <item>
        <title>Use imap Wisely to Boost Your Programming Speed</title>
        <description>&lt;p&gt;In some programming languages, there are some codes which are difficult to type. For example, in Ruby, hashrocket (&lt;code&gt;​=&amp;gt;&lt;/code&gt;) is one of such codes. These codes not only make us slow to program, but also interrupts our concentration because we have to use some brain resource just to type these codes. Thus, these codes should be made easy to type so that our flows will not be interrupted. Here is how I do it.&lt;/p&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-1&quot;&gt;
    Use imap, but Wisely
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
    &lt;p&gt;
      &lt;code&gt;imap&lt;/code&gt; is useful, but it can mess your programming experience if you use it mindlessly. I use &lt;code&gt;&amp;lt;Leader&amp;gt;&amp;lt;C-something&amp;gt;&lt;/code&gt; for insert mode mappings so that I don&amp;#8217;t get unwanted behavior when I just want to input normal texts.
    &lt;/p&gt;

    &lt;p&gt;
      Here is how I make inputting hashrocket easy (in &lt;code&gt;~/.vim/ftplugin/ruby.vim&lt;/code&gt;):
    &lt;/p&gt;

    &lt;p&gt;
      &lt;code data-gist-id=&quot;9879379&quot;&gt;&lt;/code&gt;

      &lt;p&gt;
        &lt;code&gt;&amp;lt;C-l&amp;gt;&lt;/code&gt; stands for &amp;#8216;right&amp;#8217;, because &lt;code&gt;​=&amp;gt;&lt;/code&gt; looks like a right arrow. By using this, I can input &lt;code&gt;&amp;lt;Leader&amp;gt;&amp;lt;C-l&amp;gt;&lt;/code&gt; instead of &lt;code&gt;&amp;lt;Space&amp;gt;=&amp;gt;&amp;lt;Space&amp;gt;&lt;/code&gt; when I want to input hashrocket.
      &lt;/p&gt;

      &lt;p&gt;
        For C++, I use this similar mappings:
      &lt;/p&gt;

      &lt;p&gt;
        &lt;code data-gist-id=&quot;9879471&quot;&gt;&lt;/code&gt;

        &lt;p&gt;
          This makes it easy to use streams like &lt;code&gt;cin &amp;gt;&amp;gt; var&lt;/code&gt; and &lt;code&gt;cout &amp;lt;&amp;lt; var &amp;lt;&amp;lt; endl;&lt;/code&gt;.
        &lt;/p&gt;
      &lt;/p&gt;
    &lt;/p&gt;
  &lt;/div&gt;

  &lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
    &lt;h2 id=&quot;sec-2&quot;&gt;
      What&amp;#8217;s Next?
    &lt;/h2&gt;

    &lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
      &lt;p&gt;
        You might prefer to use &lt;a href=&quot;https://github.com/kana/vim-smartchr&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://github.com&#39;]);&quot;&gt;vim-smartchr&lt;/a&gt; rather than &lt;code&gt;imap&lt;/code&gt;. It allows you to change inputs based on how many times you type certain keys in insert mode. For example, when you set vim-smartchr as follows, you can hit &lt;code&gt;​=​&lt;/code&gt; three times in insert mode to get a hashrocket with spaces around it:
      &lt;/p&gt;

      &lt;p&gt;
        &lt;code data-gist-id=&quot;9881232&quot;&gt;&lt;/code&gt;

        &lt;p&gt;
          I used to use it, but I could not adopt to it well&amp;#x2026; I had to use my brain resource (i.e. think) in order to get the code I wanted.
        &lt;/p&gt;
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 30 Mar 2014 00:00:00 +0900</pubDate>
        <link>http://genkisugimoto.com/blog/use-imap-wisely-to-boost-your-programming-speed/</link>
        <guid isPermaLink="true">http://genkisugimoto.com/blog/use-imap-wisely-to-boost-your-programming-speed/</guid>
        
        <category>vim</category>
        
        
        <category>uncategorized</category>
        
      </item>
    
      <item>
        <title>How to Prevent Committing Undesired Files</title>
        <description>&lt;p&gt;Bulk staging commands like &lt;code&gt;git add .&lt;/code&gt; are useful, but it can cause the trouble of staging undesired files. One example is adding &lt;code&gt;*.orig&lt;/code&gt; files which are generated when you use mergetool. Recently, &lt;a href=&quot;https://github.com/Genki-S/dotfiles/commit/db920f589c7225a8312927fcf0fe123daf309785&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://github.com&#39;]);&quot;&gt;I did it&lt;/a&gt;. So I built a system which prevents me from doing it again. Here is how.&lt;/p&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-1&quot;&gt;
    What You Get
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
    &lt;ul class=&quot;org-ul&quot;&gt;
      &lt;li&gt;
        A git pre-commit hook which prevents you from committing files matching certain patterns
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-2&quot;&gt;
    You can just ignore, I prefer to check
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
    &lt;p&gt;
      One easy solution would be to add &lt;code&gt;*.orig&lt;/code&gt; to your &lt;code&gt;.gitignore&lt;/code&gt;. However, I&amp;#8217;m sure I would not notice generated &lt;code&gt;*.orig&lt;/code&gt; files if &lt;code&gt;git status&lt;/code&gt; does not show them. So, I chose to use pre-commit hook so that I can still notice &lt;code&gt;*.orig&lt;/code&gt; files.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-3&quot;&gt;
    The Script
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
    &lt;p&gt;
      Here is the script to check if &lt;code&gt;*.orig&lt;/code&gt; files are included in files to be committed:
    &lt;/p&gt;

    &lt;p&gt;
      &lt;code data-gist-id=&quot;9718868&quot;&gt;&lt;/code&gt;

      &lt;p&gt;
        This script is designed to use with &lt;a href=&quot;https://github.com/icefox/git-hooks&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://github.com&#39;]);&quot;&gt;git-hooks&lt;/a&gt;, but you can paste the contents of &lt;code&gt;run_test&lt;/code&gt; function in your normal &lt;code&gt;.git/hooks/pre-commit&lt;/code&gt; file as well.
      &lt;/p&gt;
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-4&quot;&gt;
    What&amp;#8217;s Next?
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
    &lt;p&gt;
      To be honest, I am not sure if this script was worth the effort because I have never reaped a benefit from those &lt;code&gt;*.orig&lt;/code&gt; files. I found that &lt;a href=&quot;http://stackoverflow.com/questions/1251681/diff-tool-generates-unwanted-orig-files&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://stackoverflow.com&#39;]);&quot;&gt;it is possible to make mergetool not generate those &lt;code&gt;*.orig&lt;/code&gt; files&lt;/a&gt; (&lt;code&gt;git config --global mergetool.keepBackup false&lt;/code&gt;). It might be a better approach because I don&amp;#8217;t have to &lt;code&gt;git clean&lt;/code&gt; (or &lt;code&gt;rm **/*.orig&lt;/code&gt;) after using mergetool.
    &lt;/p&gt;

    &lt;p&gt;
      Anyway, it&amp;#8217;s great to be able to prevent committing in certain conditions using pre-commit hook. For example, it might be used to prevent you from committing files with, say, hard coded breakpoints like &lt;code&gt;binding.pry&lt;/code&gt; in ruby.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 23 Mar 2014 00:00:00 +0900</pubDate>
        <link>http://genkisugimoto.com/blog/how-to-prevent-committing-undesired-files/</link>
        <guid isPermaLink="true">http://genkisugimoto.com/blog/how-to-prevent-committing-undesired-files/</guid>
        
        <category>git</category>
        
        
        <category>uncategorized</category>
        
      </item>
    
      <item>
        <title>Automatically Generate Snippet Definitions of Rails Models</title>
        <description>&lt;p&gt;Snippet (a.k.a. text expansion) is a great tool to boost your productivity. By using it, you not only type less and write more, but also reduce typos and syntax errors. So, you want to use snippets as much as possible.&lt;/p&gt;

&lt;p&gt;However, there is one catch. You have to write snippet definitions. This can be tedious if you have many snippets you want to define.&lt;/p&gt;

&lt;p&gt;I recently tried to make snippet definitions of all Rails models. Because my project has many models, I could not help automating it. Here’s how.&lt;/p&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-1&quot;&gt;
    What You Get
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
    &lt;ul class=&quot;org-ul&quot;&gt;
      &lt;li&gt;
        A script which generates snippet definitions of Rails models
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-2&quot;&gt;
    Auto Generation. Easy and Consistent.
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
    &lt;p&gt;
      The great thing about auto generation is that I don&amp;#8217;t have to remember snippet triggers individually. I need a rule to auto generate, so I just have to remember the rule to use generated snippets. This time, I used the following rules:
    &lt;/p&gt;

    &lt;ol class=&quot;org-ol&quot;&gt;
      &lt;li&gt;
        A Rails model is consist of namespaces and a model name (e.g. &lt;code&gt;NameSpace::RailsModel&lt;/code&gt;)
      &lt;/li&gt;
      &lt;li&gt;
        &amp;#8216;::&amp;#8217; is replaced with &amp;#8216;:&amp;#8217; (&lt;code&gt;NameSpace:RailsModel&lt;/code&gt;)
      &lt;/li&gt;
      &lt;li&gt;
        Collect uppercase letters and &amp;#8216;:&amp;#8217; (&lt;code&gt;NS:RM&lt;/code&gt;)
      &lt;/li&gt;
      &lt;li&gt;
        Make them lowercase, and it is the trigger of the snippet for the Rails model (&lt;code&gt;ns:rm&lt;/code&gt; expands to &lt;code&gt;NameSpace::RailsModel&lt;/code&gt;)
      &lt;/li&gt;
      &lt;li&gt;
        Add &amp;#8220;_&amp;#8221; to the trigger, it will be the trigger for the Rails model in snake case (&lt;code&gt;ns:rm_&lt;/code&gt; expands to &lt;code&gt;name_space_rails_model&lt;/code&gt;)
      &lt;/li&gt;
      &lt;li&gt;
        Each namespace and model name has it&amp;#8217;s own snippet definitions (&lt;code&gt;ns&lt;/code&gt; expands to &lt;code&gt;NameSpace&lt;/code&gt;, &lt;code&gt;ns_&lt;/code&gt; to &lt;code&gt;name_space&lt;/code&gt;, &lt;code&gt;rm&lt;/code&gt; to &lt;code&gt;RailsModel&lt;/code&gt;, and &lt;code&gt;rm_&lt;/code&gt; to &lt;code&gt;rails_model&lt;/code&gt;)
      &lt;/li&gt;
      &lt;li&gt;
        Optionally, it is possible to set prefix and suffix for snippet triggers to avoid collisions with other snippets (e.g. &lt;code&gt;ns;&lt;/code&gt; rather than &lt;code&gt;ns&lt;/code&gt;)
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;
      So, if you know a model&amp;#8217;s name, you can easily derive the snippet trigger.
    &lt;/p&gt;

    &lt;p&gt;
      Here is the script I wrote to generate snippet definitions which follow above rule:
    &lt;/p&gt;

    &lt;p&gt;
      &lt;code data-gist-id=&quot;9557643&quot;&gt;&lt;/code&gt;

      &lt;p&gt;
        You might want to change snippet definition format (I use &lt;a href=&quot;https://github.com/Shougo/neosnippet.vim&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://github.com&#39;]);&quot;&gt;neosnippet&lt;/a&gt;) and run options (I append &amp;#8216;;&amp;#8217; as suffix). Here is how to use it:
      &lt;/p&gt;

      &lt;pre class=&quot;example&quot;&gt;
(from Rails root)
$ rails runner script/snippet_generator.rb &amp;gt; snippets.snip
&lt;/pre&gt;

      &lt;p&gt;
        I tried it for &lt;a href=&quot;http://www.redmine.org/&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://www.redmine.org&#39;]);&quot;&gt;Redmine&lt;/a&gt; project, and got following snippet definitions for the model &lt;code&gt;Repository::Bazaar&lt;/code&gt;:
      &lt;/p&gt;

      &lt;p&gt;
        &lt;code data-gist-id=&quot;9557672&quot;&gt;&lt;/code&gt;

        &lt;p&gt;
          Snippet for &lt;code&gt;Bazaar&lt;/code&gt; is not generated because there is a model with the same trigger &lt;code&gt;b;&lt;/code&gt; and &lt;code&gt;b_;&lt;/code&gt; previously.
        &lt;/p&gt;
      &lt;/p&gt;
    &lt;/p&gt;
  &lt;/div&gt;

  &lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
    &lt;h2 id=&quot;sec-3&quot;&gt;
      Where to place snippet definitions
    &lt;/h2&gt;

    &lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
      &lt;p&gt;
        Now you have snippet definitions, but where you should place it? Because those are project specific snippet definitions, you don&amp;#8217;t want to place those among global snippet definitions. If you are using vim, I recommend you to use a plugin which enable you to use project local vimrc (I name it as &lt;code&gt;.vimrc.local&lt;/code&gt;). I am using &lt;a href=&quot;https://github.com/MarcWeber/vim-addon-local-vimrc&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://github.com&#39;]);&quot;&gt;vim-addon-local-vimrc&lt;/a&gt;, and load local snippet definitions file from &lt;code&gt;.vimrc.local&lt;/code&gt; (if you are using neosnippet, it&amp;#8217;s &lt;code&gt;:NeoSnippetSource&lt;/code&gt;). It looks like this:
      &lt;/p&gt;

      &lt;p&gt;
        &lt;code data-gist-id=&quot;9557764&quot;&gt;&lt;/code&gt;

        &lt;p&gt;
          If you don&amp;#8217;t want the snippet definition file to pollute your &lt;code&gt;git status&lt;/code&gt;, &lt;a href=&quot;http://genkisugimoto.com/blog/keep-clean-git-working-tree/&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://genkisugimoto.com&#39;]);&quot;&gt;you can exclude it&lt;/a&gt;.
        &lt;/p&gt;
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
    &lt;h2 id=&quot;sec-4&quot;&gt;
      What&amp;#8217;s next?
    &lt;/h2&gt;

    &lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
      &lt;p&gt;
        I highly recommend you to try community driven snippet definitions (&lt;a href=&quot;https://github.com/honza/vim-snippets&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://github.com&#39;]);&quot;&gt;here&lt;/a&gt; is for vim). By using it, you don&amp;#8217;t have to define common snippets yourself (e.g. snippet for if-then-else statement). One catch is that you have to remember the trigger &amp;#x2013; but I made it possible to search snippet definitions on the fly. I&amp;#8217;ll cover it in the future post.
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 14 Mar 2014 00:00:00 +0900</pubDate>
        <link>http://genkisugimoto.com/blog/auto-generate-rails-model-snippets/</link>
        <guid isPermaLink="true">http://genkisugimoto.com/blog/auto-generate-rails-model-snippets/</guid>
        
        <category>productivity</category>
        
        <category>rails</category>
        
        
        <category>uncategorized</category>
        
      </item>
    
      <item>
        <title>Vim Plugin Settings Made Easy and Beautiful</title>
        <description>&lt;p&gt;If you use many vim plugins, where to place the plugin settings is one of the most difficult problem. In order to be a better vim user, you have to &lt;a href=&quot;http://learnvimscriptthehardway.stevelosh.com/chapters/07.html&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://learnvimscriptthehardway.stevelosh.com&#39;]);&quot;&gt;make it effortless to edit your &lt;code&gt;.vimrc&lt;/code&gt; &lt;/a&gt;. The same thing applies for plugin settings. In order to edit vim plugin settings as effortlessly as possible, I implemented a system which satisfies these requirements:&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
  &lt;li&gt;
    I can start editing plugin settings right away
  &lt;/li&gt;
  &lt;li&gt;
    I don&amp;#8217;t have to make efforts to keep the rules of the system
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s how.&lt;/p&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-1&quot;&gt;
    Existing Approaches, and Why They Don&amp;#8217;t Work
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
    &lt;p&gt;
      First of all, let&amp;#8217;s see why existing approaches didn&amp;#8217;t satisfy my needs. I think there are 2 major approaches.
    &lt;/p&gt;

    &lt;p&gt;
      One is to put all plugin settings in &lt;code&gt;.vimrc&lt;/code&gt; file. Even though opening the &lt;code&gt;.vimrc&lt;/code&gt; might be fast, you have to search where you placed the settings of that particular plugin you want to edit. And if you use many plugins, your &lt;code&gt;.vimrc&lt;/code&gt; becomes huge and I think it&amp;#8217;s difficult to edit.
    &lt;/p&gt;

    &lt;p&gt;
      Another approach is to &lt;a href=&quot;https://github.com/skwp/dotfiles/tree/master/vim/settings&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://github.com&#39;]);&quot;&gt;split files&lt;/a&gt; and &lt;a href=&quot;https://github.com/skwp/dotfiles/blob/master/vim/settings.vim&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://github.com&#39;]);&quot;&gt;source them all&lt;/a&gt; like &lt;a href=&quot;https://github.com/skwp/dotfiles&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://github.com&#39;]);&quot;&gt;YADR&lt;/a&gt;. Because it manages settings by files named &lt;code&gt;{plugin-name}.vim&lt;/code&gt;, you know where the settings of a plugin lies. However, by splitting files, it becomes tougher to find and open a file you want to edit. And you have to make some efforts to keep the name of plugin setting files consistent.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-2&quot;&gt;
    Using Plugin Manager
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
    &lt;p&gt;
      I thought the second approach was almost satisfying my needs.
    &lt;/p&gt;

    &lt;p&gt;
      If I were able to find setting files more quickly. If I didn&amp;#8217;t have to remember to keep file names consistent.
    &lt;/p&gt;

    &lt;p&gt;
      I noticed that I could satisfy these by completion of plugin names. If I can use completion when I open a plugin setting file, I can find it more quickly. And I don&amp;#8217;t have to check correct plugin names when I want to add new setting files.
    &lt;/p&gt;

    &lt;p&gt;
      So, I created this &lt;code&gt;:EditPluginSetting&lt;/code&gt; command:
    &lt;/p&gt;

    &lt;p&gt;
      &lt;code data-gist-id=&quot;9165361&quot;&gt;&lt;/code&gt;

      &lt;p&gt;
        When I want to edit plugin settings, I just issue &lt;code&gt;:EditPluginSetting&lt;/code&gt; command and hit &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; to let &lt;a href=&quot;https://github.com/Shougo/neobundle.vim&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://github.com&#39;]);&quot;&gt;NeoBundle&lt;/a&gt;, the plugin manager, complete plugin names for me. For example, when I want to edit a plugin which is related to Ruby on Rails, I can type &lt;code&gt;:EditPluginSetting rails&lt;/code&gt; and hit &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;, then the plugins which has &amp;#8220;rails&amp;#8221; in the name are shown like this:
      &lt;/p&gt;&lt;figure&gt;

      &lt;p&gt;
        &lt;img src=&quot;http://genkisugimoto.com/blog/wp-content/uploads/2014/02/wpid-plugin-name-completion1.png&quot; alt=&quot;plugin-name-completion.png&quot; /&gt;
      &lt;/p&gt;&lt;figcaption&gt;

      &lt;span class=&quot;figure-number&quot;&gt;Figure 1:&lt;/span&gt; plugin name completion&lt;/figcaption&gt; &lt;/figure&gt;

      &lt;p&gt;
        If there is one match, it completes the matching plugin name. So it is quick to access plugin setting files and I don&amp;#8217;t have to remember plugin names exactly.
      &lt;/p&gt;

      &lt;p&gt;
        When you hit &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;, it opens &lt;code&gt;{plugin-name}.vim&lt;/code&gt; file under the directory specified by &lt;code&gt;s:plugin_setting_dirname&lt;/code&gt;. You want the directory be under version control.
      &lt;/p&gt;

      &lt;p&gt;
        By using &lt;a href=&quot;https://github.com/tyru/vim-altercmd&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://github.com&#39;]);&quot;&gt;vim-altercmd&lt;/a&gt;, I can issue &lt;code&gt;ps&lt;/code&gt; command instead of &lt;code&gt;EditPluginSetting&lt;/code&gt;, and it makes editing plugin settings blazing fast.
      &lt;/p&gt;
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
  &lt;h2 id=&quot;sec-3&quot;&gt;
    What&amp;#8217;s Next?
  &lt;/h2&gt;

  &lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
    &lt;p&gt;
      As I &lt;a href=&quot;http://genkisugimoto.com/blog/how-to-lazy-load-vim-plugins/&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://genkisugimoto.com&#39;]);&quot;&gt;wrote before&lt;/a&gt;, vim plugins can be loaded lazily. Then, what&amp;#8217;s the point of loading settings of lazy plugins on vim startup? I &lt;a href=&quot;https://github.com/Genki-S/dotfiles/blob/master/vimfiles/vim/neobundle.vim&quot; onclick=&quot;javascript:_gaq.push([&#39;_trackEvent&#39;,&#39;outbound-article&#39;,&#39;http://github.com&#39;]);&quot;&gt;implemented a method&lt;/a&gt; to load plugin settings lazily as well as plugins themselves. I will cover this in the future.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 23 Feb 2014 00:00:00 +0900</pubDate>
        <link>http://genkisugimoto.com/blog/vim-plugin-settings-made-easy-and-beautiful/</link>
        <guid isPermaLink="true">http://genkisugimoto.com/blog/vim-plugin-settings-made-easy-and-beautiful/</guid>
        
        <category>vim</category>
        
        
        <category>uncategorized</category>
        
      </item>
    
  </channel>
</rss>
